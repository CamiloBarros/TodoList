version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: todolist_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: todolist_db
      POSTGRES_USER: todolist_user
      POSTGRES_PASSWORD: todolist_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    networks:
      - todolist_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U todolist_user -d todolist_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: todolist_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - todolist_network
    command: redis-server --appendonly yes --requirepass todolist_redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Node.js Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: todolist_backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: todolist_db
      DB_USER: todolist_user
      DB_PASSWORD: todolist_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: todolist_redis_password
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
      BCRYPT_ROUNDS: 12
      CORS_ORIGIN: http://localhost:5173
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - todolist_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev

  # pgAdmin (Database Administration - Optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: todolist_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@todolist.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - todolist_network
    depends_on:
      - postgres
    profiles:
      - tools

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

# Custom network
networks:
  todolist_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
